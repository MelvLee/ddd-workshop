// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SeatReservationFeature : object, Xunit.IClassFixture<SeatReservationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SeatReservation.feature"
#line hidden
        
        public SeatReservationFeature(SeatReservationFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "SeatReservation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer reserves an available seat")]
        [Xunit.TraitAttribute("FeatureTitle", "SeatReservation")]
        [Xunit.TraitAttribute("Description", "Customer reserves an available seat")]
        public virtual void CustomerReservesAnAvailableSeat()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer reserves an available seat", null, tagsOfScenario, argumentsOfScenario);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("the Screening for Movie \'Black Widow\' scheduled on \'2020-11-27 12:30\' in Room 1 i" +
                        "n Cinema \'Pathe Scheveningen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.And("there are no Reservations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
 testRunner.When("Customer \'Alfred\' reserves Seats \'A-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("Seats \'A-1\' should be reserved for Customer \'Alfred\' for the given Screening", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer reserves a reserved seat")]
        [Xunit.TraitAttribute("FeatureTitle", "SeatReservation")]
        [Xunit.TraitAttribute("Description", "Customer reserves a reserved seat")]
        public virtual void CustomerReservesAReservedSeat()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer reserves a reserved seat", null, tagsOfScenario, argumentsOfScenario);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given("the Screening for Movie \'Black Widow\' scheduled on \'2020-11-27 12:30\' in Room 1 i" +
                        "n Cinema \'Pathe Scheveningen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customer",
                            "Seats",
                            "Screening"});
                table1.AddRow(new string[] {
                            "Alfred",
                            "A-1, A-2",
                            "Black Widow in Pathe Scheveningen, Room 1 @ 27-11-2020 12:30"});
#line 11
 testRunner.And("the Reservations", ((string)(null)), table1, "And ");
#line hidden
#line 14
 testRunner.When("Customer \'Clark\' reserves Seats \'A-2, A-3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("Customer \'Clark\' should be informed that the Seats are not available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer reserves multiple available seats")]
        [Xunit.TraitAttribute("FeatureTitle", "SeatReservation")]
        [Xunit.TraitAttribute("Description", "Customer reserves multiple available seats")]
        public virtual void CustomerReservesMultipleAvailableSeats()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer reserves multiple available seats", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("the Screening for Movie \'Black Widow\' scheduled on \'2020-11-27 12:30\' in Room 1 i" +
                        "n Cinema \'Pathe Scheveningen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customer",
                            "Seats",
                            "Screening"});
                table2.AddRow(new string[] {
                            "Alfred",
                            "A-1, A-2",
                            "Black Widow in Pathe Scheveningen, Room 1 @ 27-11-2020 12:30"});
                table2.AddRow(new string[] {
                            "Clark",
                            "B-4",
                            "Black Widow in Pathe Scheveningen, Room 1 @ 27-11-2020 12:30"});
#line 19
 testRunner.And("the Reservations", ((string)(null)), table2, "And ");
#line hidden
#line 23
 testRunner.When("Customer \'Bruce\' reserves Seats \'A-5, A-6 \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("Seats \'A-5, A-6\' should be reserved for Customer \'Bruce\' for the given Screening", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer requests his reservations")]
        [Xunit.TraitAttribute("FeatureTitle", "SeatReservation")]
        [Xunit.TraitAttribute("Description", "Customer requests his reservations")]
        public virtual void CustomerRequestsHisReservations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer requests his reservations", null, tagsOfScenario, argumentsOfScenario);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given("the Screening for Movie \'Black Widow\' scheduled on \'2020-11-27 12:30\' in Room 1 i" +
                        "n Cinema \'Pathe Scheveningen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customer",
                            "Seats",
                            "Screening"});
                table3.AddRow(new string[] {
                            "Alfred",
                            "A-1, A-2",
                            "Black Widow in Pathe Scheveningen, Room 1 @ 27-11-2020 12:30"});
#line 28
 testRunner.And("the Reservations", ((string)(null)), table3, "And ");
#line hidden
#line 31
 testRunner.When("Customer \'Alfred\' queries his Reservations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customer",
                            "Seats",
                            "Screening"});
                table4.AddRow(new string[] {
                            "Alfred",
                            "A-1, A-2",
                            "Black Widow in Pathe Scheveningen, Room 1 @ 27-11-2020 12:30"});
#line 32
 testRunner.Then("Customer \'Alfred\' should get the following Reservations", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customer reserves additional seats and see their full reservations")]
        [Xunit.TraitAttribute("FeatureTitle", "SeatReservation")]
        [Xunit.TraitAttribute("Description", "Customer reserves additional seats and see their full reservations")]
        public virtual void CustomerReservesAdditionalSeatsAndSeeTheirFullReservations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer reserves additional seats and see their full reservations", null, tagsOfScenario, argumentsOfScenario);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given("the Screening for Movie \'Black Widow\' scheduled on \'2020-11-27 12:30\' in Room 1 i" +
                        "n Cinema \'Pathe Scheveningen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customer",
                            "Seats",
                            "Screening"});
                table5.AddRow(new string[] {
                            "Alfred",
                            "A-1, A-2",
                            "Black Widow in Pathe Scheveningen, Room 1 @ 27-11-2020 12:30"});
#line 38
 testRunner.And("the Reservations", ((string)(null)), table5, "And ");
#line hidden
#line 41
 testRunner.When("Customer \'Alfred\' reserves Seats \'A-5, A-6 \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.And("Customer \'Alfred\' queries his Reservations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customer",
                            "Seats",
                            "Screening"});
                table6.AddRow(new string[] {
                            "Alfred",
                            "A-1, A-2, A-5, A-6",
                            "Black Widow in Pathe Scheveningen, Room 1 @ 27-11-2020 12:30"});
#line 43
 testRunner.Then("Customer \'Alfred\' should get the following Reservations", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SeatReservationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SeatReservationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
